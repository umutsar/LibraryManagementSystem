@startuml

class Database {
    + Database()
    + ~Database()
    + void addMember(string name, string surname, string password, string category)
    + vector<string> getMember(string userID)
    + void addBook(string title, string author, string isbn, string genre, string issueNo, string historicalPeriod, string publicationDate, bool isAvailable)
    + vector<string> getBookInfo(string isbn)
}


class Library {
    - vector<Book*> books
    - vector<BasePerson*> persons
    - vector<Transaction*> transactions
    - Database db
    + Library()
    + void addBook(Book* book)
    + void addPerson(BasePerson* person)
    + void executeTransaction(Transaction* t)
}

class Librarian {
    - string librarianId
    + void manageBooks(Book* book)
    + void managePersons(BasePerson* person)
}

Library *-- Librarian : manages
Library o-- Book
Library o-- BasePerson
Library o-- Transaction


abstract class BasePerson {
    - string personId
    - string name
    - string email
    + void displayInfo() const
    + string getName() const
}

class Student {
    - int grade
    + void displayInfo() const
}

class AcademicStaff {
    - string department
    + void displayInfo() const
}

BasePerson <|-- Student
BasePerson <|-- AcademicStaff


abstract class Transaction {
    - string transId
    - string date
    + void execute() 
}

class Borrow {
    - string borrowDate
    + void execute()
}

class Return {
    - string returnDate
    + void execute()
}

Transaction <|-- Borrow
Transaction <|-- Return

class Book {
    - string title
    - string author
    - string isbn
    + void checkout()
    + void returnBook()
    + string getTitle() const
    + string getAuthor() const
    + string getISBN() const
}

class Magazine {
    - string issueNo
    + void displayInfo() const
    + string getIssueNo() const
}

class Novel {
    - string genre
    + void displayInfo() const
    + string getGenre() const
}

class HistoryBook {
    - string historicalPeriod
    + void displayInfo() const
    + string getHistoricalPeriod() const
}

Book <|-- Magazine
Book <|-- Novel
Book <|-- HistoryBook

class Expert {
}

class Admin {
    + void displayInfo() const
}

class Owner {
    + void displayInfo() const
}

Expert <|-- Admin
Expert <|-- Owner

BasePerson <|-- Expert

@enduml